---
title: "pandas_merge"
format: html
---
# Packages
```{python}
import pandas as pd
import country_converter as cc
```

```{python}
# Load datasets
oil_consumption = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_consumption.csv"
)
tidyr_population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
country_regions = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/country_continent_data.csv"
)


oil_2012 = (
    oil_consumption[oil_consumption["year"] == 2012].copy().drop(columns=["year"])
)
# people data
people = pd.DataFrame({"name": ["Alice", "Bob", "Charlie"], "age": [25, 32, 45]})

test_info_many = pd.DataFrame(
    {
        "name": ["Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"],
        "test_date": [
            "2023-06-05",
            "2023-06-10",
            "2023-08-10",
            "2023-05-02",
            "2023-05-12",
            "2023-05-15",
        ],
        "result": [
            "Negative",
            "Positive",
            "Positive",
            "Negative",
            "Negative",
            "Negative",
        ],
    }
)

farm_info = pd.DataFrame(
    {
        "farm_id": [1, 2, 3],
        "farm_name": ["Green Acres", "Harvest Hill", "Golden Fields"],
        "location": ["County A", "County B", "County A"],
    }
)

crop_yields = pd.DataFrame(
    {
        "farm_id": [1, 1, 2, 3, 3],
        "crop": ["Wheat", "Corn", "Soybeans", "Wheat", "Barley"],
        "yield_tons": [50, 60, 45, 55, 30],
    }
)

traffic_flow = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "vehicle_count": [1200, 900, 1500, 1100, 700, 600],
    }
)

pollution_levels = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "pm_2_5_level": [35.5, 42.1, 40.3, 48.2, 25.7, 30.9],
    }
)

test_info_diff = pd.DataFrame(
    {
        "name": ["alice", "Bob", "Charlie "],
        "test_date": ["2023-06-05", "2023-08-10", "2023-05-02"],
        "result": ["Negative", "Positive", "Negative"],
    }
)

asia_countries = pd.DataFrame(
    {
        "Country": ["India", "Indonesia", "Philippines"],
        "Capital": ["New Delhi", "Jakarta", "Manila"],
    }
)

asia_population = pd.DataFrame(
    {
        "Country": ["India", "indonesia", "Philipines"],
        "Population": [1393000000, 273500000, 113000000],
        "Life_Expectancy": [69.7, 71.7, 72.7],
    }
)
```
## One to Many joins

```{python}
people
```
```{python}
test_info_many
pd.merge(people, test_info_many)
```

# Practice
```{python}
# Datasets
farm_info
crop_yields

# merge
pd.merge(farm_info, crop_yields)
```
# Multiple key columns
```{python}
traffic_flow
```
```{python}
pollution_levels
```
```{python}
# incorrect
pd.merge (traffic_flow, pollution_levels, on = "street_name")
```

```{python}
# The idea of multiple keys
pd.merge (traffic_flow, pollution_levels, on = ["street_name", "time_of_day"])

```
# Practice
```{python}
oil_consumption.sort_values(by = ["country", "year"""])
tidyr_population.sort_values(by = ["country", "year"])

```
```{python}
oil_pop_merge = pd.merge (oil_consumption, tidyr_population, on = ["country", "year"])
oil_pop_merge
pd.set_option('display.max_rows', None)
oil_pop_merge["consumption_per_capita"] = oil_pop_merge["oil_consump"] / oil_pop_merge["population"]
oil_pop_merge
```
```{python}
test_info_diff
```

```{python}
pd.merge( people, test_info_diff) # only Bob is matched
```
```{python}
test_info_diff["name"] = test_info_diff["name"].str.title()
```
```{python}
pd.merge( people, test_info_diff) #Charlie is not merged
```
```{python}
test_info_diff["name"].unique()
```

```{python}
test_info_diff["name"] = test_info_diff["name"].str.strip()
```

```{python}
pd.merge( people, test_info_diff) #all characters are correctly joined
```
## Practice Question
```{python}
asia_countries
asia_population
```

```{python}
pd.merge(asia_countries,asia_population) # only India is joined

```
```{python}
asia_population ["Country"] = asia_population ["Country"].str.title()
#capitalizes Indonesia 
```
```{python}
pd.merge(asia_countries, asia_population) #India and Indonesia are joined, but not Phillipines

```
```{python}
asia_population ["Country"].unique()
asia_population['Country'] = asia_population['Country'].replace('Philipines', 'Philippines')
 
```
```{python}
pd.merge(asia_countries, asia_population) # all countries are now merged

```

## Key Mismatches: Oil Consumption Example

```{python}
oil_consumption.sort_values(["country", "year"])
tidyr_population

```
```{python}
oil_pop =pd.merge(oil_consumption, tidyr_population, 
how = "left", on = ["country", "year"]). sort_values (["country", "year"])

oil_pop
```
```{python}
oil_countries = set (oil_consumption["country"].unique())
pop_countries = set (tidyr_population["country"].unique())

```

```{python}
# showing countries in oil but not in pop datasets
oil_countries - pop_countries

```
```{python}
# showing countries in oil but not in pop datasets
pop_countries - oil_countries

```
```{python}
# side note on set arithmetic
set1 = set ([1,2,3,4,5])
set2 = set ([2,3,5])
set1-set2
```
## Merging with Country Codes
```{python}
cc.convert("Nigeria", to ="ISO3")
cc.convert("nigeria", to ="ISO3")

```
```{python}
oil_consumption ["country_code"] = cc.convert(oil_consumption["country"], to = "ISO3")

tidyr_population ["country_code"] = cc.convert(tidyr_population["country"], to = "ISO3")
```
```{python}
oil_countries = set (oil_consumption["country_code"].unique())
pop_countries = set (tidyr_population["country_code"].unique())
```
```{python}
oil_countries - pop_countries
```
# Practice Q.
```{python}
oil_2012
country_regions
```
```{python}
oil_2012 ["country_code"] = cc.convert(oil_2012["country"], to = "ISO3")
```
```{python}
oil_countrys = set (oil_2012["country_code"].unique())
region_countries = set (country_regions["country_code"].unique())
```
```{python}
oil_countrys - region_countries
```

```{python}
oil_region =pd.merge(oil_2012, country_regions, 
how = "left", on = ["country_code"]).sort_values("continent")

oil_region

# The countries with the highest oil consumption by continent
##South Africa - Africa, USA- Americas, CHine -Asia, Russia -Europe, Australia - Oceania
```