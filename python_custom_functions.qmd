---
title: "Python Custom Functions"
format: html
---

# Imports

```{python}
import pandas as pd
import numpy as np
import vega_datasets as vd
```
# Basics of a function

```{python}
def pounds_to_kg (pounds):
    return pounds * 0.4536
```

```{python}
pounds_to_kg(150)
```
Using inside a dataframe

```{python}
pounds_df = pd.DataFrame({"pounds": [150,200,250]})
pounds_df
```

```{python}
pounds_df['kg'] = pounds_to_kg(pounds_df['pounds'])
pounds_df
```

```{python}
# Years to months
riots_df = vd.data.la_riots()
riots_df

def years_to_months (years):
    return years * 12

riots_df['age_months'] = years_to_months(riots_df['age'])
riots_df
```
# Functions with multiple arguments

```{python}
def calc_calories(carb_grams, protein_grams, fat_grams):
    result = (carb_grams * 4) + (protein_grams*4) + (fat_grams*9)
    return result
```

```{python}
calc_calories(carb_grams=50, protein_grams=25, fat_grams=15)
```

```{python}
#Does not work due to missing argument
#calc_calories(carb_grams=50, protein_grams=25)
```

```{python}
# default arguments
def calc_calories2(carb_grams=0, protein_grams=0, fat_grams=0):
    result = (carb_grams * 4) + (protein_grams*4) + (fat_grams*9)
    return result
```

```{python}
calc_calories2(carb_grams=50)
```

```{python}
food_df = pd.DataFrame({
    "food": ["apple", "Avocado"],
    "carb": [25,10],
    "protein": [0,1],
    "fat": [0,14]
})
food_df
```

```{python}
food_df['calories'] = calc_calories2(food_df['carb'], food_df['protein'], food_df['fat'])
food_df
```

```{python}
def calc_bmi(weight_kg=0, height_m=0):
    result2 = (weight_kg)/(height_m * height_m)
    return result2

bmi_df = pd.DataFrame({
    'weight': [70,80,100], # in kg
    'Height': [1.7,1.8,1.2] # in meters
})
bmi_df

bmi_df['BMI']= calc_bmi(bmi_df['weight'], bmi_df['Height'])
bmi_df
```
# Introduction to conditionals: if,elif, else

```{python}
def class_num(num): 
    if num>0:
        return "Positive"
    elif num <0:
        return 'Negative'
    elif num ==0:
        return 'Zero'
    else:
        return "invalid"
print (class_num(5))
print (class_num(-5))
print (class_num(0))
print (class_num(np.nan))
```
Using on a dataFrame

```{python}
num_df = pd.DataFrame({'num': [10, -5, 0]})
num_df
```

```{python}
# This does not work
# class_num (num_df['num'])
```

```{python}
class_num_vec = np.vectorize(class_num)
```

```{python}
num_df ['Category'] = class_num_vec(num_df['num'])
num_df
```

```{python}
def categorize_grade(grade):
    if grade>=85:
        return 'Excellent'
    elif grade >=60 and grade < 85:
        return 'Pass'
    elif grade >=0 and grade < 60:
        return 'Fail'
    else:
        return 'Invalid grade'
categorize_grade (70)

```

```{python}
categorize_grade_vec = np.vectorize(categorize_grade)
categorize_grade_vec([70,80,100])
```

```{python}
# Practice: Age categorization
def age_cat(age):
    if age < 18:
        return "Minor"
    elif age >= 18 and age < 65:
        return "Adult"
    elif age > 65:
        return "Senior"
    else:
        return "Invalid age"


age_cat_vec = np.vectorize(age_cat)

riots_df["age_category"] = age_cat_vec(riots_df["age"])
riots_df

```
