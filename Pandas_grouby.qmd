
# imports
```{python}
import pandas as pd
import numpy as np
```

```{python}
# import dataset
yao = pd.read_csv ('data/yaounde_mini.csv')
yao
```
# Introduce the Agg method

```{python}
# classical method
yao['age'].mean()
```

```{python}
yao.agg(mean_age = ('age', 'mean')) # tuple
```

```{python}
yao.agg(mean_age= ('age', 'mean'), median_age = ('age', 'median'))
```

```{python}
yao.agg(mean_weight= ('weight_kg', 'mean'), median_weight = ('weight_kg', 'median'))
```
# introducing groub by
```{python}
yao.groupby("sex").agg(mean_age= ('age', 'mean'), median_age = ('age', 'median')). reset_index()
```

```{python}
(
yao
 .groupby("sex")
 .agg(mean_age= ('age', 'mean'), median_age = ('age', 'median'))
 .reset_index()
)
```
# calculate max and min plus # of neighborhoods
```{python}
(
    yao.groupby("neighborhood")
    .agg(
        max_weight = ("weight_kg", "max"),
        min_weight = ("weight_kg", "min"),
        no_inds =    ("weight_kg", "size"),
    )
    .reset_index()
)
```
# Practice
```{python}
(
    yao.groupby("sex")
    .agg(
        min_height_cm = ("height_cm", "min"),
        max_height_cm = ("height_cm", "max"),
        count =       ("height_cm", "size"),
    )
    .reset_index()
)
```
# Nested Groupings

```{python}
(
    yao.groupby(["neighborhood", "sex"])
    .agg(
        max_weight = ("weight_kg", "max"),
        min_weight = ("weight_kg", "min"),
        no_inds =    ("weight_kg", "size"),
    )
    .reset_index()
)
```

```{python}
(
    yao.groupby(["age_category_3", "sex"])
    .agg(
        min_height_cm = ("height_cm", "min"),
        max_height_cm = ("height_cm", "max"),
        count =       ("height_cm", "size"),
    )
    .reset_index()
)
```

# NaN values in agg

```{python}
(
    yao.groupby("is_smoker")
    .agg(weight_mena = ("weight_kg", "mean"))

)

```

```{python}
(
    yao.groupby("is_smoker", dropna = False)
    .agg(weight_mean = ("weight_kg", "mean"),
    count = ("weight_kg", "size"))

)
```
# Practice

```{python}
(
    yao.groupby("is_pregnant", dropna = False)
    .agg(weight_mean = ("weight_kg", "mean"),
    count = ("weight_kg", "size"))

)
```
# Custom stats with lambda functions

```{python}
def range_func(x):
    return max(x) - min(x)

range_func([1,5,6])
```
# using lambda
```{python}
range_func = lambda x: max(x) - min(x)
range_func([1,5,6])
```
Range of weights per nei
```{python}
(
   yao.groupby("neighborhood")
   .agg(weight_range =("weight_kg", lambda x: max(x) - min(x)) )
)
```
# coefficient of variation

```{python}
(
   yao.groupby("neighborhood")
   .agg(weight_coeff_of_var_ =("weight_kg", lambda x: (x.std()/x.mean())*100))
   .reset_index()
)
```

# Practice:  IQR of age by neighborhood
```{python}
(
   yao.groupby("neighborhood")
   .agg(age_iqr =("age", lambda x: x.quantile(0.75) - x.quantile(0.25)))
   .reset_index()
)
```
