---
title: "Pandas Conditional Transforms"
format: html
---
# Imports

```{python}
import pandas as pd
import numpy as np
import vega_datasets as vd
import plotly.express as px
```
# Intro to replace

```{python}
tips = px.data.tips()
tips['day'].value_counts()
```

```{python}
day_mapping = {
    'Sun': "Sunday",
    'Sat': "Saturday",
    'Thur': "Thursday",
    'Fri': "Friday"
}
tips['day_full'] = tips['day'].replace(day_mapping)
tips
```

```{python}
tips['day_full'] = tips['day'].replace ({
    'Sun': "Sunday",
    'Sat': "Saturday",
    'Thur': "Thursday",
    'Fri': "Friday"
})
tips
```

```{python}
tips['sex_abbr'] = tips['sex'].replace ({
    'Female': "F",
    'Male': "M"
})
tips
```
# Handling missing values with replace

```{python}
movies = vd.data.movies()
movies['Creative_Type'].value_counts(dropna=False)
```

```{python}
# Replacing None values with a string
movies['Creative_Type'] = movies['Creative_Type'].replace ({None: "Unknown/Unclear"})
movies['Creative_Type'].value_counts(dropna=False)

```

```{python}
#Replacing NaN values with a number
movies['US_DVD_Sales'].tail(10)
movies['US_DVD_Sales'] = movies['US_DVD_Sales'].replace({np.nan : 0}) 
```

```{python}
movies['US_DVD_Sales'].tail(10)

```

```{python}
# Practice Question
movies['MPAA_Rating'] = movies['MPAA_Rating'].replace ({None: "Unrated", 'Not Rated': "Unrated" })
movies['MPAA_Rating'].value_counts(dropna=False)

```
# categorizing numeric data with custom functions

```{python}
def categ_gross(gross):
    if gross < 10000000:
        return 'Low'
    elif gross >=10000000 and gross <= 50000000:
        return 'Medium'
    elif gross > 50000000:
        return 'High'
    else:
        return 'None'

categ_gross_vec = np.vectorize (categ_gross)
categ_gross_vec([500,70000000])
```

```{python}
movies ['gross_category'] = categ_gross_vec(movies['US_Gross'])
```

# Complex transformation with Custom Functions
```{python}
def flag_movie(movie_type, us, worldwide):
    if movie_type == 'Super Hero' and us == worldwide:
        return 'US Action Movie'
    elif movie_type == 'Super Hero' and worldwide > us:
        return 'Global Action Movie'
    else:
        return 'None'
flag_movie_vec = np.vectorize(flag_movie)
```

```{python}
flag_movie('Super Hero',100,100 )
flag_movie('Super Hero',100,3200 )

```

```{python}
movies['Action_flag'] = flag_movie_vec(movie_type =movies['Creative_Type'], us =movies['US_Gross'], worldwide = movies['Worldwide_Gross'] )
movies['Action_flag'].value_counts()
```

```{python}
#movies
def flag_movie2(rotten, imdb):
    if rotten >70 and imdb < 5:
        return 'Critic Friendly'
    elif rotten <50 and imdb >7:
        return 'Commercial'
    else:
        return 'Other'

flag_movie2_vec = np.vectorize(flag_movie2)
```

```{python}
movies['flag'] = flag_movie2_vec(rotten =movies['Rotten_Tomatoes_Rating'], imdb =movies['IMDB_Rating'] )
movies['flag'].value_counts()
```